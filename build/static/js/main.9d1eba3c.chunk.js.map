{"version":3,"sources":["components/layout/Navigationbar.js","components/registration_components/UserFunctions.js","components/Login.js","components/registration_components/FormPersonalDetails.js","components/registration_components/FormPasswords.js","components/registration_components/FormAddressDetails.js","components/registration_components/Confirm.js","components/registration_components/FormLanguage.js","components/registration_components/FormDevVerification.js","components/Register.js","components/Landing.js","App.js","serviceWorker.js","index.js"],"names":["Navigationbar","e","preventDefault","localStorage","removeItem","this","props","history","push","loginRegLink","Nav","Link","to","className","userLink","href","onClick","logOut","bind","Navbar","collapseOnSelect","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","usertoken","Component","withRouter","register","newCustomer","axios","post","firstName","lastName","phoneNo","email","address1","address2","city","regDate","password","customerType","language","then","response","data","catch","err","console","log","login","input","customer","rememberMe","setItem","sessionToken","devVerification","accessToken","userToken","token","userTele","fetch","method","headers","body","JSON","stringify","json","Login","state","username","validInput","validServer","handleChange","setState","target","value","continue","Number","isInteger","parseInt","res","statusCode","window","location","radioButtonChange","checked","values","invalidInputMsg","class","role","invalidServerMsg","Alert","Card","Form","onSubmit","Body","Title","Group","Label","Control","type","onChange","placeholder","required","Button","block","Text","FormPersonalDetails","validEmail","validPhoneNo","allow","validatePhoneNo","validateEmail","nextStep","back","prevStep","match","invalidPhoneNoMsg","invalidEmailMsg","FormPasswords","validPassword","validConfirmPassword","confirmPassword","validatePassword","invalidPasswordMsg","invalidConfirmPasswordMsg","FormAddressDetails","Confirm","readOnly","FormLanguage","size","FormDevVerification","validToken","invalidTokenMsg","Register","step","formatDate","Date","toLocaleString","date","d","month","getMonth","day","getDate","year","getFullYear","length","join","Landing","App","exact","path","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.9d1eba3c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport { Button, Navbar, Nav, NavItem, NavDropdown, MenuItem } from 'react-bootstrap';\n\nclass Navigationbar extends Component {\n  logOut(e) {\n    e.preventDefault()\n    localStorage.removeItem('usertoken')\n    this.props.history.push(`/`)\n  }\n\n  render() {\n    const loginRegLink = (\n      <Nav>\n        <Nav.Link>\n          <Link to=\"/login\" className=\"nav-link\">\n            Sign In\n          </Link>\n        </Nav.Link>\n\n        <Nav.Link>\n          <Link to=\"/register\" className=\"nav-link\">\n            Sign Up\n          </Link>\n        </Nav.Link>\n      </Nav>\n\n    )\n\n    const userLink = (\n      <Nav>\n        <Nav.Link>\n            <a href=\"\" onClick={this.logOut.bind(this)} className=\"nav-link\">\n              Logout\n            </a>\n        </Nav.Link>\n      </Nav>\n    )\n\n    return (\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Zero Trash</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            \n          </Nav>\n          {localStorage.usertoken ? userLink : loginRegLink}\n        </Navbar.Collapse>\n      </Navbar>\n    )\n  }\n}\n\nexport default withRouter(Navigationbar)","import axios from 'axios'\n\nexport const register = newCustomer => {\n  return axios\n    .post('http://68.183.188.135:5000/customers/register', {\n      firstName: newCustomer.firstName,\n      lastName: newCustomer.lastName,\n      phoneNo: newCustomer.phoneNo,\n      email: newCustomer.email,\n      address1: newCustomer.address1,\n      address2: newCustomer.address2,\n      city: newCustomer.city,\n      regDate: newCustomer.regDate,\n      password: newCustomer.password,\n      customerType: newCustomer.customerType,\n      language: newCustomer.language,\n    })\n    .then(response => {\n      return response.data;\n    })\n    .catch(err => {\n      console.log(err)\n    })\n}\n\nexport const login = input => {\n    let newCustomer = input.customer;\n    let rememberMe = input.rememberMe;\n\n    return axios\n    .post('http://68.183.188.135:5000/customers/login', {\n      phoneNo: newCustomer.phoneNo,\n      email: newCustomer.email,\n      password: newCustomer.password\n    })\n    .then(response => {\n        localStorage.setItem('usertoken', response.data.sessionToken);\n        return response.data\n    })\n    .catch(err => {\n      console.log(err)\n    })\n}\n\nexport const devVerification = input => {\n\n  const data = { \n    accessToken: 'f83bdbecf8f2596cfd837b11ab2aa1fb',\n    userToken: input.token,\n    userTele: input.phoneNo\n  };\n\n  return fetch('http://collector.ceykod.com/api/v1/verifyToken/', {\n    method: 'POST',\n    headers: {\n\n    },\n    body: JSON.stringify(data),\n  })\n  .then((response) => response.json())\n  .then(response => {\n    console.log(response)\n    return response\n  })\n  .catch(err => {\n    console.log(err)\n  })\n}\n","import React, { Component } from \"react\";\nimport { login } from './registration_components/UserFunctions';\nimport { Button, Form,Card,Alert } from 'react-bootstrap';\n\nclass Login extends Component {\n\n    state = { \n        username: '',\n        password: '',\n        validInput: true,\n        validServer: true,\n        rememberMe: false,\n    }\n\n    handleChange = input => e => {\n        this.setState({\n            [input]: e.target.value\n        });\n\n    }\n\n    continue = e => {\n        e.preventDefault();\n\n        const {username, password, rememberMe } = this.state;\n        let customer = {};\n        if(Number.isInteger(parseInt(username))){\n            console.log('Number is integer')\n            customer = {\n                phoneNo: username,\n                email: 'null',\n                password: password\n            }\n        }\n        else{\n            console.log('Number is not integer')\n            customer = {\n                phoneNo: 'null',\n                email: username,\n                password: password\n            }\n        }\n        login({customer,rememberMe}).then(res => {\n            if (res) {\n                let statusCode = res.statusCode;\n                console.log(statusCode);\n                if(statusCode == 'S2000'){\n                    console.log('Success')\n                    this.setState({validInput: true, validServer :true}); \n                    window.location.href = '/';\n                }\n                else if(statusCode == 'E4001'){\n                    console.log('Wrong')\n                    this.setState({validInput: false, validServer : true}); \n                }\n                else if(statusCode == 'E5000' || statusCode == 'E5003'){\n                    console.log('Error')\n                    this.setState({validInput: true, validServer : false}); \n                }\n            }\n            else{\n                this.setState({validServer: false});\n            }\n        })\n    }\n\n    radioButtonChange = e => {\n        console.log('Radio button Changed: '+ e.target.checked);\n        if(e.target.checked){\n            this.setState({ rememberMe: true });\n        }\n        else{\n            this.setState({ rememberMe: false });\n        }\n    }\n\n    render() {\n        const values = this.state; \n\n        const invalidInputMsg = (\n            <div class=\"alert alert-danger\" role=\"alert\">\n            Invalid mobile number or password!\n            </div>\n        )\n        const invalidServerMsg = (\n            <Alert variant='danger'>\n                Database error!\n            </Alert>\n        )\n\n        return (\n            \n        <Card>\n            <Form onSubmit = {e => this.continue(e)}>\n                <Card.Body>\n                    <Card.Title className='text-center'>\n                    Sign In\n                    </Card.Title>\n                    <Form.Group >\n                        <Form.Label>Mobile number or Email</Form.Label>\n                        <Form.Control type=\"text\"  value = {values.username} onChange = {this.handleChange('username')} placeholder=\"Enter mobile number or email\" required/>\n                    </Form.Group>\n                    <Form.Group >\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type=\"password\" value = {values.password} onChange = {this.handleChange('password')} placeholder=\"Enter password\" required />\n                    </Form.Group>\n                    <br />\n                    {values.validServer? (values.validInput? null : invalidInputMsg) : invalidServerMsg}\n                    <Button variant=\"success\" type=\"submit\" block>\n                        Continue\n                    </Button>\n                    <Card.Text>\n                        forgot&ensp;<a href=\"#\">password?</a>\n                    </Card.Text>\n                    <Card.Text>\n                        new to Zero Trash?&ensp;<a href=\"/register\">Register Here!</a>\n                    </Card.Text>\n                </Card.Body>\n            </Form>\n        </Card>\n        );\n    }\n}\n\nexport default Login;","import React, { Component } from \"react\";\nimport { Button, Form,Card } from 'react-bootstrap';\n\nexport class FormPersonalDetails extends Component {\n\n    state = { \n        validEmail: true,\n        validPhoneNo: true,\n    }\n\n    continue = e => {\n        e.preventDefault();\n\n        const {phoneNo, email} = this.props.values\n\n        let allow = true;\n        if(!this.validatePhoneNo(phoneNo)) {\n            this.setState({\n                validPhoneNo: false\n            });\n            allow = false;\n        }\n        else{\n            this.setState({\n                validPhoneNo: true\n            });\n        }\n        if(!this.validateEmail(email)) {\n            this.setState({\n                validEmail: false\n            });\n            allow = false;\n        }\n        else{\n            this.setState({\n                validEmail: true\n            });   \n        }\n        if(allow){\n            this.props.nextStep();\n        }\n    }\n\n    back = e => {\n        e.preventDefault();\n        this.props.prevStep();\n    }\n\n    validatePhoneNo(phoneNo) {\n\n        let regPhoneNo = /^07\\d{8}$/;\n        if(phoneNo.match(regPhoneNo)) {\n            return true;\n        }\n        return false;   \n\n    }\n\n    validateEmail(email) {\n        let regEmail =  /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        if(email.match(regEmail)) {\n            return true\n        }\n        return false\n    }\n\n\n    render() {\n\n        const { values,handleChange } = this.props;\n        const {validEmail, validPhoneNo} = this.state;\n\n        const invalidPhoneNoMsg = (\n            <Form.Text className=\"text-muted text-alert\">\n                Invalid phone No\n            </Form.Text>\n        )\n        const invalidEmailMsg = (\n            <Form.Text className=\"text-muted text-alert\">\n                Invalid email address\n            </Form.Text>\n        )\n\n        const invalidClass = 'is-invalid';\n \n        return (\n            <Card>\n                <Form onSubmit = {e => this.continue(e)}>\n                    <Card.Body>\n                        <Card.Title className='text-center'>\n                        Sign Up\n                        </Card.Title>\n                        <Form.Group >\n                            <Form.Label>First Name</Form.Label>\n                            <Form.Control type=\"text\"  value = {values.firstName} onChange = {handleChange('firstName')} placeholder=\"Enter first name\" required/>\n                        </Form.Group>\n                        <Form.Group >\n                            <Form.Label>Last Name</Form.Label>\n                            <Form.Control type=\"text\" value = {values.lastName} onChange = {handleChange('lastName')} placeholder=\"Enter last name\" required />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Mobile Number</Form.Label>\n                            <Form.Control type=\"text\" className = {validPhoneNo ? null : invalidClass} value = {values.phoneNo} onChange = {handleChange('phoneNo')} placeholder=\"Enter mobile number\" required/>\n                            {validPhoneNo ? null : invalidPhoneNoMsg}\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control type=\"text\" className = {validEmail ? null : invalidClass} value = {values.email} onChange = {handleChange('email')} placeholder=\"Enter email\" required/>\n                            {validEmail ? null : invalidEmailMsg}\n                        </Form.Group>\n                        <br />\n                        <Button variant=\"success\" type=\"submit\" block>\n                            Continue\n                        </Button>\n                        <Button variant=\"light\" onClick = {this.back} block>\n                            Back\n                        </Button>\n                        <Card.Text>\n                            Already have an account?&ensp;<a href=\"#\">Login Here!</a>\n                        </Card.Text>\n                    </Card.Body>\n                </Form>\n            </Card>\n    \n        );\n    }\n}\n\nexport default FormPersonalDetails;","import React, { Component } from \"react\";\nimport { Button, Form,Card } from 'react-bootstrap';\n\n\nexport class FormPasswords extends Component {\n\n    state = { \n        validPassword: true,\n        validConfirmPassword: true\n    }\n\n    continue = e => {\n        e.preventDefault();\n\n        const {password, confirmPassword} = this.props.values\n\n        let allow = true;\n        if(!this.validatePassword(password)) {\n            this.setState({\n                validPassword: false\n            });\n            allow = false;\n        }\n        else{\n            this.setState({\n                validPassword: true\n            });\n        }\n        if(password != confirmPassword) {\n            this.setState({\n                validConfirmPassword: false\n            });\n            allow = false;\n        }\n        else{\n            this.setState({\n                validConfirmPassword: true\n            });   \n        }\n        if(allow){\n            this.props.nextStep();\n        }\n    }\n\n    back = e => {\n        e.preventDefault();\n        this.props.prevStep();\n    }\n\n    //password length must be [7,15], Must contain at least one numeric digit and a special character\n    validatePassword(password) {\n\n        let regPassword=  /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{7,15}$/;\n        if(password.match(regPassword)) { \n            console.log('Correct'+ password)\n            return true;\n        }\n        console.log('Incorrect' + password)\n        return false;\n\n    }\n\n    render() {\n\n        const { values,handleChange } = this.props;\n        const {validPassword, validConfirmPassword } = this.state;\n\n        const invalidPasswordMsg = (\n            <Form.Text className=\"text-muted text-alert\">\n                Password must contain 7 to 15 characters including atleast 1 numeric\n                character and atleast 1 special character.\n            </Form.Text>\n        )\n\n        const invalidConfirmPasswordMsg = (\n            <Form.Text className=\"text-muted text-alert\">\n                Passwords do not match.\n            </Form.Text>\n        )\n\n        const invalidClass = 'is-invalid';\n\n        \n\n        return (\n\n            <Card>\n                <Form onSubmit = {e => this.continue(e)}>\n                    <Card.Body>\n                        <Card.Title className='text-center'>\n                        Sign Up\n                        </Card.Title>\n                        <Form.Group>\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" className = {validPassword ? null : invalidClass} value = {values.password} onChange = {handleChange('password')} placeholder=\"Enter Password\" required/>\n                            {validPassword ? null : invalidPasswordMsg}\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Confirm Password</Form.Label>\n                            <Form.Control type=\"password\" className = {validPassword ? null : invalidClass} value = {values.confirmPassword} onChange = {handleChange('confirmPassword')} placeholder=\"Confirm Password\" required />\n                            {validConfirmPassword ? null : invalidConfirmPasswordMsg}\n                        </Form.Group>\n                        <br />\n                        <Button variant=\"success\" type=\"submit\" block>\n                            Continue\n                        </Button>\n                        <Button variant=\"light\" onClick = {this.back} block>\n                            Back\n                        </Button>\n                        <Card.Text>\n                            Already have an account?&ensp;<a href=\"#\">Login Here!</a>\n                        </Card.Text>\n                    </Card.Body>\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default FormPasswords;","import React, { Component } from \"react\";\nimport { Button, Form,Card } from 'react-bootstrap';\n\nexport class FormAddressDetails extends Component {\n\n    continue = e => {\n        e.preventDefault();\n        this.props.nextStep();\n    }\n\n    back = e => {\n        e.preventDefault();\n        this.props.prevStep();\n    }\n\n\n    render() {\n\n        const { values,handleChange } = this.props;\n\n        return (\n            <Card>\n                <Form onSubmit = {e => this.continue(e)}>\n                    <Card.Body>\n                        <Card.Title className='text-center'>\n                        Sign Up\n                        </Card.Title>\n                        <Form.Group>\n                            <Form.Label>Address 1</Form.Label>\n                            <Form.Control type=\"text\"  value = {values.address1} onChange = {handleChange('address1')} placeholder=\"address 1\" required/>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Address 2</Form.Label>\n                            <Form.Control type=\"text\"  value = {values.address2} onChange = {handleChange('address2')} placeholder=\"address 2\" required />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>City</Form.Label>\n                            <Form.Control type=\"text\" value = {values.city} onChange = {handleChange('city')} placeholder=\"City\" required/>\n                        </Form.Group>\n                        <br />\n                        <Button variant=\"success\" type=\"submit\" block>\n                            Continue\n                        </Button>\n                        <Button variant=\"light\" onClick = {this.back} block>\n                            Back\n                        </Button>\n                        <Card.Text>\n                            Already have an account?&ensp;<a href=\"#\">Login Here!</a>\n                        </Card.Text>\n                    </Card.Body>\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default FormAddressDetails;","import React, { Component } from \"react\";\nimport { register } from './UserFunctions';\nimport { Button, Form,Card, Alert } from 'react-bootstrap';\n\nexport class Confirm extends Component {\n\n    state = {\n        validServer: true,\n        validInput : true\n    }\n\n    continue = e => {\n        e.preventDefault();\n\n        const { values: {firstName, lastName, phoneNo, email, customerType, password, address1, address2, city, regDate, language} } = this.props;\n        console.log(this.props.values);\n        const customer = {\n            firstName: firstName,\n            lastName: lastName,\n            phoneNo: phoneNo,\n            email: email,\n            customerType: customerType,\n            password: password,\n            address1: address1,\n            address2: address2,\n            city: city,\n            regDate: regDate,\n            language: language\n        }\n        console.log(customer);\n        register(customer).then(res => {\n            if (res) {\n                let statusCode = res.statusCode;\n                console.log(statusCode);\n                if(statusCode == 'S2000'){\n                    console.log('Success')\n                    this.setState({validInput: true, validServer :true}); \n                    window.location.href = '/login';\n                }\n                else if(statusCode == 'E4001'){\n                    console.log('Wrong')\n                    this.setState({validInput: false, validServer : true}); \n                }\n                else if(statusCode == 'E5000'){\n                    console.log('Error')\n                    this.setState({validInput: true, validServer : false}); \n                }\n            }\n            else{\n                this.setState({validServer: false});\n            }\n        })\n    }\n\n\n    back = e => {\n        e.preventDefault();\n        this.props.prevStep();\n    }\n\n\n    render() {\n\n        const invalidInputMsg = (\n            <Alert variant='danger'>\n                A user with these account details already exists!\n            </Alert>\n        )\n\n        const invalidServerMsg = (\n            <Alert variant='danger'>\n                Database error!\n            </Alert>\n        )\n\n        const { values: {firstName, lastName, phoneNo, email, address1, address2, city} } = this.props;\n        const { validInput, validServer} = this.state;\n        return (\n\n            <Card>\n                <Form onSubmit = {e => this.continue(e)}>\n                    <Card.Body>\n                        <Card.Title className='text-center'>\n                        Confirm Information\n                        </Card.Title>\n                        <Form.Group >\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control type=\"text\"  value = {firstName + \" \" + lastName} readOnly/>\n                        </Form.Group>\n                        <Form.Group >\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control type=\"text\" value = {email} readOnly />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Mobile Number</Form.Label>\n                            <Form.Control type=\"text\" value = {phoneNo} readOnly/>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Address</Form.Label>\n                            <Form.Control type=\"text\"  value = {address1+ \", \"+address2 + \", \" + city} readOnly/>\n                        </Form.Group>\n                        <br />\n                        {validServer? (validInput? null : invalidInputMsg) : invalidServerMsg}\n                        <Button variant=\"success\" type=\"submit\" block>\n                            Confirm & Submit\n                        </Button>\n                        <Button variant=\"light\" onClick = {this.back} block>\n                            Back\n                        </Button>\n                        <Card.Text>\n                            Already have an account?&ensp;<a href=\"#\">Login Here!</a>\n                        </Card.Text>\n                    </Card.Body>\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Confirm;","import React, { Component } from 'react';\nimport { Button, Form, Card } from 'react-bootstrap';\n\nclass FormLanguage extends Component {\n\n    continue (e) {\n        e.preventDefault();\n        this.props.nextStep();\n    }\n\n      render() { \n        const { handleChange } = this.props;\n\n \n                                \n\n                                \n\n        return ( \n            <Card>\n                <Form onSubmit = {e => this.continue(e)}>\n                    <Card.Body>\n                        <Card.Title className='text-center'>\n                        Choose Your Language\n                        </Card.Title>\n                        <br />\n                        <div className=\"mb-3\" className='btn-block-language'>\n                            <Button type = 'submit' value='sinhala' variant=\"success\" size=\"lg\" onClick={handleChange('language')}>\n                            Sinhala\n                            </Button>\n                            <Button type = 'submit' value = 'english' variant=\"success\" size=\"lg\" onClick={handleChange('language')}>\n                            English\n                            </Button>\n                        </div>\n                    </Card.Body>\n                </Form>\n            </Card>\n        );\n    }\n}\n \nexport default FormLanguage;","import React, { Component } from 'react';\nimport { Button, Form,Card, Alert } from 'react-bootstrap';\nimport { devVerification } from './UserFunctions';\n\nclass FormDevVerification extends Component {\n    state = {  \n        token: '',\n        validInput: true,\n        validToken: true\n    }\n\n    handleChange = input => e => {\n        this.setState({\n            [input]: e.target.value\n        });\n    }\n\n    continue = e => {\n        e.preventDefault();\n\n        const customer = {\n            token: this.state.token,\n            phoneNo: this.props.values.phoneNo\n        }\n\n        devVerification(customer).then(res => {\n            if (res) {\n                console.log(res.statusCode);\n                let statusCode = res.statusCode;\n                if(statusCode == 'S1000'){\n                    this.setState({validToken: true, validInput : true});\n                    this.props.nextStep();\n                }\n                else if(statusCode == 'E3002'){\n                    this.setState({validToken: false, validInput : true});\n                }\n                else{\n                    this.setState({validToken: true, validInput : false});\n                }\n            }\n            else{\n                this.setState({validInput: false});\n            }\n        })\n    }\n\n    back = e => {\n        e.preventDefault();\n        this.props.prevStep();\n    }\n\n    render() { \n        const { validInput, validToken } = this.state;\n\n        const invalidInputMsg = (\n            <Alert variant='danger'>\n                Server Error. Please try again later!\n            </Alert>\n        )\n\n        const invalidTokenMsg = (\n            <Alert variant='danger'>\n                Incorrect verification code!\n            </Alert>\n        )\n\n        return (\n            \n            <Card>\n                <Form onSubmit = {e => this.continue(e)}>\n                    <Card.Body>\n                        <Card.Title className='text-center'>\n                            Mobile number verification\n                        </Card.Title>\n                        <Form.Group>\n                            <Form.Label>Device Verification Code</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"\" value={this.state.token} onChange = {this.handleChange('token')} required/>\n                            <Form.Text className=\"text-muted\">\n                            Do not share this code with anyone else\n                            </Form.Text>\n                        </Form.Group>\n                        <br />\n                        <Card.Text>\n                        The device verification code has been sent to you when you registered your mobile number using ssd.\n                        </Card.Text>\n                        {validInput? (validToken? null : invalidTokenMsg) : invalidInputMsg}\n                        <Button variant=\"success\" type=\"submit\" block>\n                            Verify & Continue\n                        </Button>\n                        <Button variant=\"light\" onClick = {this.back} block>\n                            Back\n                        </Button>\n                    </Card.Body>\n                </Form>\n            </Card>\n        );\n    }\n}\n \nexport default FormDevVerification;","import React, { Component } from 'react';\nimport FormPersonalDetails from './registration_components/FormPersonalDetails';\nimport FormPasswords from './registration_components/FormPasswords';\nimport FormAddressDetails from './registration_components/FormAddressDetails';\nimport Confirm from './registration_components/Confirm'\nimport FormLanguage from './registration_components/FormLanguage'\nimport FormDevVerification from './registration_components/FormDevVerification'\n\nclass Register extends Component {\n    state = { \n        step: 1,\n        language: '',\n        customerType:  'Regular Customer',\n        firstName: '',\n        lastName: '',\n        phoneNo: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        address1: '',\n        address2: '',\n        city: '',\n        regDate: this.formatDate(new Date().toLocaleString())\n    };\n\n\n    formatDate(date) {\n        var d = new Date(date),\n            month = '' + (d.getMonth() + 1),\n            day = '' + d.getDate(),\n            year = d.getFullYear();\n\n        if (month.length < 2)\n            month = '0' + month;\n        if (day.length < 2)\n            day = '0' + day;\n\n        return [year, month, day].join('-');\n    }\n\n    nextStep = () => {\n        const { step } = this.state;\n        this.setState({\n            step: step + 1\n        });\n    }\n\n    prevStep = () => {\n        const { step } = this.state;\n        this.setState({\n            step: step - 1\n        });\n    }\n    \n    handleChange = input => e => {\n        this.setState({\n            [input]: e.target.value\n        });\n    }\n\n    render() { \n\n        const { step } = this.state;\n        const {firstName, lastName, email, phoneNo, password, confirmPassword, address1, address2, city, regDate, customerType, language} = this.state;\n        const values = {firstName, lastName, email, phoneNo, password, confirmPassword, address1, address2, city, regDate, customerType, language};\n\n        switch(step) {\n            case 1:\n                return (\n                    <FormLanguage \n                        nextStep = {this.nextStep}\n                        handleChange = {this.handleChange}\n                    />\n                )\n            case 2:\n                return (\n                    <FormPersonalDetails \n                        nextStep = {this.nextStep}\n                        prevStep = {this.prevStep}\n                        handleChange = {this.handleChange}\n                        values = {values}\n                    />\n                )\n            case 3:\n                return (\n                    <FormDevVerification \n                        nextStep = {this.nextStep}\n                        prevStep = {this.prevStep}\n                        handleChange = {this.handleChange}\n                        values = {values}\n                    />\n                );\n            case 4:\n                return (\n                    <FormPasswords \n                    nextStep = {this.nextStep}\n                    prevStep = {this.prevStep}\n                    handleChange = {this.handleChange}\n                    values = {values}\n                    />\n                )\n            case 5:\n                return (\n                    <FormAddressDetails \n                    nextStep = {this.nextStep}\n                    prevStep = {this.prevStep}\n                    handleChange = {this.handleChange}\n                    values = {values}\n                    />\n                )\n            case 6:\n                return (\n                    <Confirm \n                    nextStep = {this.nextStep}\n                    prevStep = {this.prevStep}\n                    values = {values}\n                    />\n                )\n        }\n    }\n}\n\nexport default Register;\n ","import React, { Component } from 'react';\n\nclass Landing extends Component {\n    state = {  }\n    render() { \n        return ( \n            <div />\n        );\n    }\n}\n \nexport default Landing;","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport Navigationbar from './components/layout/Navigationbar'\nimport Login from './components/Login'\nimport Register from './components/Register'\nimport Landing from './components/Landing'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Navigationbar />\n          <Route exact path=\"/\" component={Landing} />\n          <div className=\"container\">\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/login\" component={Login} />\n          </div>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}